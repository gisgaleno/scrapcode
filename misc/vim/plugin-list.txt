http://vimawesome.com/

# handy for test async running
https://github.com/tpope/vim-dispatch

:set list <-- show whitespace

~~~ no longer use Pathogen ~~~ now use :help packages
~~~
~~~ see https://vi.stackexchange.com/questions/9522/what-is-the-vim8-package-feature-and-how-should-i-use-it
~~~
~~~ in short use   ~/.vim/pack/main/opt/${package}
~~~ and use :packadd! in vimrc, or let autoload
~~~ note that "main" is arbitrarily chosen local name for
~~~ plugin collection
~~~
~~~ for packages in git just e.g.
~~~ mkdir -p ~/.vim/pack/main/opt
~~~ git clone git://github.com/ntpeters/vim-better-whitespace ~/.vim/pack/main/opt/vim-better-whitespace
~~~
~~~ note github will let you clone the bare repo url w/o .git 
~~~
~~~ use :scriptnames             to list loaded
~~~ use :help local-additions    to list plugins with help files
~~~ use :helptags ~/.vim/pack    to reindex plugin help
~~~ use :packadd! plugin         to load plugin


mkdir -p ~/.git/pack
pushd ~/.git/pack
for url in \
	https://github.com/tpope/vim-sensible \
	https://github.com/ntpeters/vim-better-whitespace \
	https://github.com/tpope/vim-fugitive \
	https://github.com/scrooloose/syntastic.git \
	https://github.com/bling/vim-airline \
	https://github.com/elzr/vim-json \
	https://github.com/justinmk/vim-sneak \
	https://github.com/kien/ctrlp.vim \
	https://github.com/majutsushi/tagbar \
	https://github.com/xolox/vim-easytags \
	https://github.com/airblade/vim-gitgutter \
	https://github.com/tpope/vim-repeat \
	https://github.com/scrooloose/nerdcommenter \
	https://github.com/plasticboy/vim-markdown \
	https://github.com/sjl/gundo.vim \
	https://github.com/tpope/vim-sleuth \
	https://github.com/tpope/vim-surround \
	https://github.com/tomasr/molokai \
	https://github.com/exu/pgsql.vim \
	https://github.com/mattn/gist-vim \
	https://github.com/embear/vim-localvimrc \
; do
	git clone $url;
done
popd

# for development use
https://github.com/tpope/vim-scriptease

Maybe:
https://github.com/Valloric/YouCompleteMe
https://github.com/SirVer/ultisnips
https://github.com/honza/vim-snippets
https://github.com/mhinz/vim-signify

Not at the moment, but useful:
https://github.com/tpope/vim-projectionist


learn about:

vim jumplist
``, ctl-o
'f' and 't' motion commands

ctrl-p from ctrlp.vim

F8 key from tagbar

:UpdateTags, :HighlightTags from vim-easytags

vim-gitgutter's ]c and [c hunk jumping, hs and hr to stage/revert

gundo commands: http://sjl.bitbucket.org/gundo.vim

vim-surround quoting commands: https://github.com/tpope/vim-surround

What is <Leader> ?


:Gist commands

ctrlp docs
http://kien.github.io/ctrlp.vim/

c-f to toggle file/buffer
c-d to toggle path/filename
? in ctlp mode for help


vim wildignore


c-space for tagsearch

:help cscope

:scs for split cscope . Tab versoin?

http://vim.wikia.com/wiki/Easier_buffer_switching

:help buffers
:help buffer-list
:buffers
:b

gf <-- "goto file" named by cursor pos

ctl-w s <-- split current window

TABS!!!
tab use
https://joshldavis.com/2014/04/05/vim-tab-madness-buffers-vs-tabs/
:tab command

:h map-which-keys

origin of a mapping: :verbose map <key>

switchbuf var

quickfix?
    :help quickfix
    :copen, :cw <-- view quickfix in window (latter better)
    :.cc <-- jump to error under cursor, or just enter in window
    :cl <-- list quickfix candidate errors
    :cl! <-- list all error info
    :cc1 <-- list error <1>
    :cn <-- next
    :cp <-- prev
    :cr <-- rewind to start
    :cexpr <-- make temp quickfix list from a command or expression, handy for "grep for all of <x>"
    :cdo , :cfdo <-- loop over quickfix entries and do a cmd


"leader" is "\" by default, it means etension command
